package leetcode;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * 1093. Statistics from a Large Sample
 * Medium
 *
 * We sampled integers between 0 and 255, and stored the results in an array count:
 *  count[k] is the number of integers we sampled equal to k.
 *
 *
 * Return the minimum, maximum, mean, median, and mode of the sample respectively,
 *  as an array of floating point numbers.  The mode is guaranteed to be unique.
 *
 * Recall that the median of a sample is:
 * - The middle element, if the elements of the sample were sorted
 *    and the number of elements is odd;
 * - The average of the middle two elements, if the elements of the sample were sorted
 *    and the number of elements is even.
 *
 * Constraints:
 * 1. count.length == 256
 * 2. 1 <= sum(count) <= 10^9
 * 3. The mode of the sample that count represents is unique.
 * 4. Answers within 10^-5 of the true value will be accepted as correct.
 *
 * 此题含义是, 在[0,255]中采样, 在样本中, 将k出现的次数存入count[k], 例如:
 * count = [0,1,3,4,0...0]:
 * k = 0, count[k] = 0 说明在样本里, 0出现的次数为0次
 * k = 1, count[k] = 1 说明在样本里, 1出现的次数为1次
 * k = 2, count[k] = 3 说明在样本里, 2出现的次数为3次
 * k = 3, count[k] = 4 说明在样本里, 3出现的次数为4次 -> 众数 mode
 * 所以min=1.0, max=3.0, mean=(1+2+2+2+3+3+3+3)/8.0=2.375, median=[2+3]/2.0=2.5, mode=3.0
 *
 * 时间复杂度: O(1). 因为数组长度256, 两次循环512, 仍是常数
 * 空间复杂度: O(1)
 */
public class _1093_Statistics {
    public double[] sampleStats(int[] count) {
        double min = -1, max = 0, mean = 0, median = 0;
        double sum = 0; // sum设为double, 否则算mean时会出问题
        int mode = 0; // 在这里mode为int, 因为还需要用count[mode]来寻找众数
        int n = 0; // n = 样本数目

        for (int k = 0; k < count.length; k++) {
            if (count[k] > 0) {
                // 样本中, i出现过至少一次
                if (min < 0) {
                    min = k;
                }
                max = k;
                n += count[k];
                sum += k * count[k];
                if (count[k] > count[mode]) {
                    mode = k;
                }
            }
        }

        // 第一遍循环做完, 已找到 min, max, mode, 已获得样本数目n, 样本数字总和sum

        if (n > 0) {
            mean = sum / n;
        } else {
            return new double[]{0.0, 0.0, 0.0, 0.0, 0.0};
        }

        int m1 = (n + 1) / 2;
        int m2 = (n / 2) + 1;
        // 如果样本数n为odd, m1 = m2
        // 如果样本数n为even, m1 + 1 = m2

        for (int i = 0, c =0; i < count.length; i++) {
            //n为odd时,  median =  m1 = m2      = m1 / 2 + m2 / 2
            //n为even时, median = (m1 + m2) / 2 = m1 / 2 + m2 / 2

            if (c < m1 && c + count[i] >= m1) {
                // find m1, add its half
                median += i / 2.0d;
            }
            if (c < m2 && c + count[i] >= m2) {
                // find m2, add its half
                median += i / 2.0d;
            }
            c += count[i];
        }

        return new double[]{min, max, mean, median, mode};
    }

    @Test
    void test1() {
        // sample = [1,2,2,2,3,3,3,3]
        int[] count = new int[]{0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        double[] expected = new double[]{1.00000,3.00000,2.37500,2.50000,3.00000};

        double[] actual = (new _1093_Statistics().sampleStats(count));
        assertTrue(compareDoubleArrays(expected, actual));
    }

    @Test
    void test2() {
        // sample = [1,1,1,1,2,2,2,3,3,4,4]
        int[] count = new int[]{0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        double[] expected = new double[]{1.00000,4.00000,2.18182,2.00000,1.00000};

        double[] actual = (new _1093_Statistics().sampleStats(count));
        assertTrue(compareDoubleArrays(expected, actual));
    }

    @Test
    void test3() {
        // sample = [0,0,1,2,3,4]
        int[] count = new int[]{2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        double[] expected = new double[]{0.00000,4.00000,1.66667,1.50000,0.00000};

        double[] actual = (new _1093_Statistics().sampleStats(count));
        assertTrue(compareDoubleArrays(expected, actual));
    }

    @Test
    void test4() {
        int[] count = new int[]{2725123,2529890,2612115,3807943,3002363,3107290,
                2767526,981092,896521,2576757,2808163,3315813,2004022,2516900,
                607052,1203189,2907162,1849193,1486120,743035,3621726,3366475,
                639843,3836904,462733,2614577,1881392,85099,709390,3534613,360309,
                404975,715871,2258745,1682843,3725079,564127,1893839,2793387,
                2236577,522108,1183512,859756,3431566,907265,1272267,2261055,
                2234764,1901434,3023329,863353,2140290,2221702,623198,955635,
                304443,282157,3133971,1985993,1113476,2092502,2896781,1245030,
                2681380,2286852,3423914,3549428,2720176,2832468,3608887,174642,
                1437770,1545228,650920,2357584,3037465,3674038,2450617,578392,
                622803,3206006,3685232,2687252,1001246,3865843,2755767,184888,
                2543886,2567950,1755006,249516,3241670,1422728,809805,955992,
                415481,26094,2757283,995334,3713918,2772540,2719728,1204666,
                1590541,2962447,779517,1322374,1675147,3146304,2412486,902468,
                259007,3161334,1735554,2623893,1863961,520352,167827,3654335,
                3492218,1449347,1460253,983079,1135,208617,969433,2669769,284741,
                1002734,3694338,2567646,3042965,3186843,906766,2755956,2075889,
                1241484,3790012,2037406,2776032,1123633,2537866,3028339,3375304,
                1621954,2299012,1518828,1380554,2083623,3521053,1291275,180303,
                1344232,2122185,2519290,832389,1711223,2828198,2747583,789884,
                2116590,2294299,1038729,1996529,600580,184130,3044375,261274,
                3041086,3473202,2318793,2967147,2506188,127448,290011,3868450,
                1659949,3662189,1720152,25266,1126602,1015878,2635566,619797,
                2898869,3470795,2226675,2348104,2914940,1907109,604482,2574752,
                1841777,880254,616721,3786049,2278898,3797514,1328854,1881493,
                1802018,3034791,3615171,400080,2277949,221689,1021253,544372,
                3101480,1155691,3730276,1827138,3621214,2348383,2305429,313820,
                36481,2581470,2794393,902504,2589859,740480,2387513,2716342,
                1914543,3219912,1865333,2388350,3525289,3758988,961406,1539328,
                448809,1326527,1339048,2924378,2715811,376047,3642811,2973602,
                389167,1026011,3633833,2848596,3353421,1426817,219995,1503946,
                2311246,2618861,1497325,3758762,2115273,3238053,2419849,2545790};
        double[] expected = new double[]{0.0,255.0,128.64187,131.0,175.0};

        double[] actual = (new _1093_Statistics().sampleStats(count));
        assertTrue(compareDoubleArrays(expected, actual));
    }

    private boolean compareDoubleArrays(double[] d1, double[] d2) {
        for (int i = 0; i < d1.length; i++) {
            /*Double truncatedDouble = BigDecimal.valueOf(d2[i])
                    .setScale(5, RoundingMode.HALF_UP)
                    .doubleValue();*/

            double a = d1[i];
            double b = d2[i];
            double c = a - b;

            if (Math.abs(c) > 0.00001) {
                System.out.println("sttu actual[" + i + "]=" + d2[i]);
                return false;
            }
        }
        return true;
    }
}
